// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // e.g., "oauth" or "credentials"
  provider          String  // e.g., "google", "github", etc.
  providerAccountId String  // The ID from the OAuth provider
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String     @unique
  password          String
  nativeLanguage    String     @default("English")
  learningLanguages String[]   @default([])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  accounts          Account[]
  sessions          Session[]
  progress          Progress[]
  learning          Learning[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  language  String
  level     Int      @default(1)
  xp        Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, language])
}

model Learning {
  id           String   @id @default(cuid())
  userId       String
  language     String
  word         String
  translation  String
  difficulty   Int      @default(0)  // 0-100 scale
  lastRecalled DateTime @default(now())
  nextReview   DateTime
  successCount Int      @default(0)
  failureCount Int      @default(0)
  notes        String?  @db.Text
  tags         String[] // For categorizing words (e.g., "food", "verbs", etc.)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, language])
  @@index([nextReview])
}
