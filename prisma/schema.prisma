generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  password          String
  nativeLanguage    String           @default("English")
  activeLanguage    String           @default("en")
  learningLanguages String[]         @default([])
  accountSetup      Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  accounts          Account[]
  chats             Chat[]
  learning          Learning[]
  progress          Progress[]
  sessions          Session[]
  speech            Speech[]
  visualLearning    VisualLearning[]
  vocabulary        Vocabulary[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  language  String
  level     Int      @default(1)
  xp        Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, language])
}

model Learning {
  id           String   @id @default(cuid())
  userId       String
  language     String
  word         String
  translation  String
  difficulty   Int      @default(0)
  lastRecalled DateTime @default(now())
  nextReview   DateTime
  successCount Int      @default(0)
  failureCount Int      @default(0)
  notes        String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, language])
  @@index([nextReview])
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  language  String
  message   String
  response  String
  audioUrl  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Vocabulary {
  id           String    @id @default(cuid())
  userId       String
  language     String
  word         String
  translation  String
  mastery      Int       @default(0)
  lastReviewed DateTime?
  nextReview   DateTime?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VisualLearning {
  id              String   @id @default(cuid())
  userId          String
  language        String
  imageUrl        String
  description     String
  userDescription String?
  accuracy        Int?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Speech {
  id            String   @id @default(cuid())
  userId        String
  language      String
  prompt        String
  audioUrl      String
  transcription String?
  accuracy      Int?
  feedback      String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
